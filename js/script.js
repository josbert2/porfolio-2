"use strict";var _createClass=function(){function a(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}}();function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}$(document).ready(function(){AOS.init();for(var t=d3.select.bind(d3),o=document.body.clientWidth,s=35,r=t("svg").attr("width",o).attr("height",s),e=function(){function i(t,e,n,a){_classCallCheck(this,i),this.piScaled=2*Math.PI/t,this.amplitude=e,this.offset=n,this.opacity=a,this.path=r.append("path").attr("stroke","url(#loaderGradient)").attr("fill","none").attr("stroke-opacity",a),this.line=d3.svg.line().x(function(t){return t.index}).y(function(t){var e,n=Math.abs(o/2-t.index)-(o/2*h-12.5);return e=Math.cos(Math.PI*Math.max(0,Math.min(25,n))/25)/2+.5,s/2+t.value*e})}return _createClass(i,[{key:"draw",value:function(){this.path.attr("d",this.generatePath())}},{key:"generatePath",value:function(){for(var t=[],e=0;e<o;++e)t.push({value:Math.sin((e+this.offset)*this.piScaled)*this.amplitude,index:e});return this.line(t)}}]),i}(),a=[],n=0;n<2;++n){var i=new e(87.5+Math.random()*s*8,s/2-Math.random()*s/4,12.5*n+5*Math.random(),.25+.75*Math.random());i.draw(),a.push(i)}var h=0,l=1;!function t(e){1<h&&0<l?l=-5:h<0&&l<0&&(l=1),h+=.003*l;for(var n=0;n<a.length;++n)a[n].offset+=((n+1)%2*2-1)*(.2*Math.random()+.9),a[n].draw();requestAnimationFrame(t)}()}),$(window).enllax(),function(s,r){r(function(){setTimeout(function(){r("body").removeClass("fade"),r(".loader-wrapper").addClass("isHide"),r(".loader-wrapper").css("display","none")},3e3),r(".ripple").on("click",function(t){t.preventDefault();var e=r("<div/>"),n=r(this).offset(),a=t.pageX-n.left,i=t.pageY-n.top;e.addClass("ripple-effect");var o=r(".ripple-effect");o.css("height",r(this).height()),o.css("width",r(this).height()),e.css({top:i-o.height()/2,left:a-o.width()/2,background:r(this).data("ripple-color")}).appendTo(r(this)),s.setTimeout(function(){e.remove()},2e3)})})}(window,jQuery),$(document).ready(function(){var n=100;$(".more").each(function(){var t=$(this).html();if(t.length>n){var e=t.substr(0,n)+'<span class="moreellipses">...&nbsp;</span><span class="morecontent"><span>'+t.substr(n,t.length-n)+'</span>&nbsp;&nbsp;<a href="" class="morelink"></a></span>';$(this).html(e)}})}),$(document).ready(function(){var t=window.location.href;function e(){var t=$("#content-sub"),e=t.height(),n=t.width(),a=$("#footer"),i=a.height(),o=a.width();console.log("Content Height = "+e+"px"),console.log("Content Width = "+n+"px"),console.log("Footer Height = "+i+"px"),console.log("Footer Width = "+o+"px"),t.css({"margin-bottom":i+35})}$(".site-nav a").each(function(){this.href===t&&$(this).addClass("site-nav__link--active")}),$(window).scroll(function(){150<$(window).scrollTop()?$(".site-header").addClass("pingned"):$(".site-header").removeClass("pingned")}),e(),$(window).resize(function(){e()})}),$(document).on("click",'a[href^="#"]',function(t){t.preventDefault(),$("html, body").animate({scrollTop:$($.attr(this,"href")).offset().top},500)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
